{
  "service": {
    "service": "secret-vault-api",
    "serviceObject": {
      "name": "secret-vault-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUser"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteUser"
            }
          },
          "GetUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUserById"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getAllUsers"
            }
          },
          "GetLogsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getLogs"
            }
          },
          "CreateLogLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createLog"
            }
          },
          "GetProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getProject"
            }
          },
          "CreateProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createProject"
            }
          },
          "UpdateProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateProject"
            }
          },
          "DeleteProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteProject"
            }
          },
          "GetSecretsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getSecrets"
            }
          },
          "CreateSecretLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createSecret"
            }
          },
          "UpdateSecretLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateSecret"
            }
          },
          "DeleteSecretLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteSecret"
            }
          },
          "RegisterWebhookLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-registerWebhook"
            }
          },
          "SyncPipelineLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-syncPipeline"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "secret-vault-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "secret-vault-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.getUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.createUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.updateUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.deleteUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.getUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByIdLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.getAllUsers",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetLogsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.getLogs",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getLogs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLogsLogGroup"
            ]
          },
          "CreateLogLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.createLog",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createLog",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateLogLogGroup"
            ]
          },
          "GetProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.getProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProjectLogGroup"
            ]
          },
          "CreateProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.createProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateProjectLogGroup"
            ]
          },
          "UpdateProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.updateProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-updateProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProjectLogGroup"
            ]
          },
          "DeleteProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.deleteProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-deleteProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteProjectLogGroup"
            ]
          },
          "GetSecretsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.getSecrets",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getSecrets",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSecretsLogGroup"
            ]
          },
          "CreateSecretLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.createSecret",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createSecret",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSecretLogGroup"
            ]
          },
          "UpdateSecretLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.updateSecret",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-updateSecret",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateSecretLogGroup"
            ]
          },
          "DeleteSecretLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.deleteSecret",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-deleteSecret",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteSecretLogGroup"
            ]
          },
          "RegisterWebhookLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.registerWebhook",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-registerWebhook",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterWebhookLogGroup"
            ]
          },
          "SyncPipelineLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z/secret-vault-api.zip"
              },
              "Handler": "handler.syncPipeline",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-syncPipeline",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SyncPipelineLogGroup"
            ]
          },
          "GetUserLambdaVersionuQeWS3NEhAtzl5CBv0k6TIDOHaEAb7JsrAstAI1W8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "CreateUserLambdaVersioneasT1b8GAuaC3PYUILgFzJytKEsrXdBG94jhfNg64": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "UpdateUserLambdaVersiondyXWN9PwOybLZI3YQ9CyCVbxmRXxwZzsxSGZC10dKA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "DeleteUserLambdaVersionzusSb3xkWXMzsCysXrHInpTDSsT5pS8W4eOfS6twM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "GetUserByIdLambdaVersionKViII2LESKzKUNcV2memdNKKVlFGGYjEuseagmHPcx8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIdLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "GetAllUsersLambdaVersionIwFsaQvcOSpR936FDLffJguQ83YINCxc3bxsOTdY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "GetLogsLambdaVersion3T4CM1Jqmle6r0WMyXTTVcrilzaFIFsMBStH7YVBSU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLogsLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "CreateLogLambdaVersion2c2BsHxIFBlU95SKVA0DSAVl8kCmDGgm1Gpv79r31Mg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLogLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "GetProjectLambdaVersionDrYR58EMvxgxsOuO3gSp0sAn9pCqwTJ0J8oyLHc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProjectLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "CreateProjectLambdaVersionNNMQtKSw1VfjtSiDHHjzqC0qWaM9NLv1aO3SlB4D2Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProjectLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "UpdateProjectLambdaVersionI8laqwRdRpSmHWbbE53ADnuVRaV676qkvBJ5YWM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProjectLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "DeleteProjectLambdaVersion20RHmhxgDVx80BfCdZAKKdDQxaRu9b5SslgXzPEAEQw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProjectLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "GetSecretsLambdaVersiongcjmWQwfcqYMiiCVTbOMKFw57cHf2mQ3iBDpOrU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSecretsLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "CreateSecretLambdaVersionSTQWQiIvr5FZJmdsHRYNUtG5bgMvf267kdHtOc6Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSecretLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "UpdateSecretLambdaVersionzezZE2mqArlZI0KcZF6z1ec49i1YncNFrE6g3kFGiI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateSecretLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "DeleteSecretLambdaVersionL5pMhpl6zbnnGcQwmWwlVvCj0FwZ5e7GSNUdvKs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteSecretLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "RegisterWebhookLambdaVersion0t2cVKUkJ2ZKMlsd0XrUzYdrIAMF1qI7FIx24IK8kY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterWebhookLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "SyncPipelineLambdaVersions28qoq1Dq6db28pGT6r4CVFKyYG4DlWlD9s9pJoIw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SyncPipelineLambdaFunction"
              },
              "CodeSha256": "ydROHEbkTpVgo1pPioXq9Bn/frWopNmEPFiksAey/F0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-secret-vault-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceGetDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashuserDashbyDashid": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-user-by-id",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashallDashusers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-all-users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashlogs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-logs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashlog": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-log",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashsecrets": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-secrets",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashsecret": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-secret",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashsecret": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-secret",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashsecret": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete-secret",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRegisterwebhook": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "registerWebhook",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSyncDashpipeline": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "sync-pipeline",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetDashuserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashuserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashuserPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteDashuserDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashuserDashbyDashidGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashuserDashbyDashid"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashallDashusersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashallDashusers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashlogsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashlogs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLogsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetLogsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashlogPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashlog"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLogLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateLogLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashprojectGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashprojectPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashprojectPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteDashprojectDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashsecretsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashsecrets"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSecretsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSecretsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashsecretPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashsecret"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateSecretLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateSecretLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashsecretPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashsecret"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateSecretLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateSecretLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteDashsecretDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteDashsecret"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteSecretLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteSecretLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRegisterwebhookPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegisterwebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterWebhookLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterWebhookLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSyncDashpipelinePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSyncDashpipeline"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SyncPipelineLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SyncPipelineLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1742318952682": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGetDashuserGet",
              "ApiGatewayMethodCreateDashuserPost",
              "ApiGatewayMethodUpdateDashuserPut",
              "ApiGatewayMethodDeleteDashuserDelete",
              "ApiGatewayMethodGetDashuserDashbyDashidGet",
              "ApiGatewayMethodGetDashallDashusersGet",
              "ApiGatewayMethodGetDashlogsGet",
              "ApiGatewayMethodCreateDashlogPut",
              "ApiGatewayMethodGetDashprojectGet",
              "ApiGatewayMethodCreateDashprojectPut",
              "ApiGatewayMethodUpdateDashprojectPut",
              "ApiGatewayMethodDeleteDashprojectDelete",
              "ApiGatewayMethodGetDashsecretsGet",
              "ApiGatewayMethodCreateDashsecretPut",
              "ApiGatewayMethodUpdateDashsecretPut",
              "ApiGatewayMethodDeleteDashsecretDelete",
              "ApiGatewayMethodRegisterwebhookPut",
              "ApiGatewayMethodSyncDashpipelinePut"
            ]
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLogsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLogsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateLogLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLogLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSecretsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSecretsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateSecretLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSecretLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateSecretLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateSecretLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteSecretLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteSecretLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterWebhookLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterWebhookLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SyncPipelineLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SyncPipelineLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuditLogTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AuditLog",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ProjectTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Project",
              "AttributeDefinitions": [
                {
                  "AttributeName": "projectId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "projectId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SecretTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Secret",
              "AttributeDefinitions": [
                {
                  "AttributeName": "secretId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "secretId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "UserTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "User",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
            "Export": {
              "Name": "sls-secret-vault-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionuQeWS3NEhAtzl5CBv0k6TIDOHaEAb7JsrAstAI1W8"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersioneasT1b8GAuaC3PYUILgFzJytKEsrXdBG94jhfNg64"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersiondyXWN9PwOybLZI3YQ9CyCVbxmRXxwZzsxSGZC10dKA"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionzusSb3xkWXMzsCysXrHInpTDSsT5pS8W4eOfS6twM"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIdLambdaVersionKViII2LESKzKUNcV2memdNKKVlFGGYjEuseagmHPcx8"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionIwFsaQvcOSpR936FDLffJguQ83YINCxc3bxsOTdY"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetLogsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLogsLambdaVersion3T4CM1Jqmle6r0WMyXTTVcrilzaFIFsMBStH7YVBSU"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetLogsLambdaFunctionQualifiedArn"
            }
          },
          "CreateLogLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLogLambdaVersion2c2BsHxIFBlU95SKVA0DSAVl8kCmDGgm1Gpv79r31Mg"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateLogLambdaFunctionQualifiedArn"
            }
          },
          "GetProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProjectLambdaVersionDrYR58EMvxgxsOuO3gSp0sAn9pCqwTJ0J8oyLHc"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetProjectLambdaFunctionQualifiedArn"
            }
          },
          "CreateProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProjectLambdaVersionNNMQtKSw1VfjtSiDHHjzqC0qWaM9NLv1aO3SlB4D2Y"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateProjectLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProjectLambdaVersionI8laqwRdRpSmHWbbE53ADnuVRaV676qkvBJ5YWM"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-UpdateProjectLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProjectLambdaVersion20RHmhxgDVx80BfCdZAKKdDQxaRu9b5SslgXzPEAEQw"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-DeleteProjectLambdaFunctionQualifiedArn"
            }
          },
          "GetSecretsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSecretsLambdaVersiongcjmWQwfcqYMiiCVTbOMKFw57cHf2mQ3iBDpOrU"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetSecretsLambdaFunctionQualifiedArn"
            }
          },
          "CreateSecretLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSecretLambdaVersionSTQWQiIvr5FZJmdsHRYNUtG5bgMvf267kdHtOc6Q"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateSecretLambdaFunctionQualifiedArn"
            }
          },
          "UpdateSecretLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateSecretLambdaVersionzezZE2mqArlZI0KcZF6z1ec49i1YncNFrE6g3kFGiI"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-UpdateSecretLambdaFunctionQualifiedArn"
            }
          },
          "DeleteSecretLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteSecretLambdaVersionL5pMhpl6zbnnGcQwmWwlVvCj0FwZ5e7GSNUdvKs"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-DeleteSecretLambdaFunctionQualifiedArn"
            }
          },
          "RegisterWebhookLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterWebhookLambdaVersion0t2cVKUkJ2ZKMlsd0XrUzYdrIAMF1qI7FIx24IK8kY"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-RegisterWebhookLambdaFunctionQualifiedArn"
            }
          },
          "SyncPipelineLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SyncPipelineLambdaVersions28qoq1Dq6db28pGT6r4CVFKyYG4DlWlD9s9pJoIw"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-SyncPipelineLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getUser": {
        "handler": "functions/user.getUser",
        "events": [
          {
            "http": {
              "path": "get-user",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionuQeWS3NEhAtzl5CBv0k6TIDOHaEAb7JsrAstAI1W8"
      },
      "createUser": {
        "handler": "functions/user.createUser",
        "events": [
          {
            "http": {
              "path": "create-user",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersioneasT1b8GAuaC3PYUILgFzJytKEsrXdBG94jhfNg64"
      },
      "updateUser": {
        "handler": "functions/user.updateUser",
        "events": [
          {
            "http": {
              "path": "update-user",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-updateUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersiondyXWN9PwOybLZI3YQ9CyCVbxmRXxwZzsxSGZC10dKA"
      },
      "deleteUser": {
        "handler": "functions/user.deleteUser",
        "events": [
          {
            "http": {
              "path": "delete-user",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-deleteUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionzusSb3xkWXMzsCysXrHInpTDSsT5pS8W4eOfS6twM"
      },
      "getUserById": {
        "handler": "functions/user.getUserById",
        "events": [
          {
            "http": {
              "path": "get-user-by-id",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-getUserById",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserByIdLambdaVersionKViII2LESKzKUNcV2memdNKKVlFGGYjEuseagmHPcx8"
      },
      "getAllUsers": {
        "handler": "functions/user.getAllUsers",
        "events": [
          {
            "http": {
              "path": "get-all-users",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-getAllUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllUsersLambdaVersionIwFsaQvcOSpR936FDLffJguQ83YINCxc3bxsOTdY"
      },
      "getLogs": {
        "handler": "handler.getLogs",
        "events": [
          {
            "http": {
              "path": "get-logs",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-getLogs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetLogsLambdaVersion3T4CM1Jqmle6r0WMyXTTVcrilzaFIFsMBStH7YVBSU"
      },
      "createLog": {
        "handler": "handler.createLog",
        "events": [
          {
            "http": {
              "path": "create-log",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-createLog",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateLogLambdaVersion2c2BsHxIFBlU95SKVA0DSAVl8kCmDGgm1Gpv79r31Mg"
      },
      "getProject": {
        "handler": "handler.getProject",
        "events": [
          {
            "http": {
              "path": "get-project",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-getProject",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProjectLambdaVersionDrYR58EMvxgxsOuO3gSp0sAn9pCqwTJ0J8oyLHc"
      },
      "createProject": {
        "handler": "handler.createProject",
        "events": [
          {
            "http": {
              "path": "create-project",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-createProject",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateProjectLambdaVersionNNMQtKSw1VfjtSiDHHjzqC0qWaM9NLv1aO3SlB4D2Y"
      },
      "updateProject": {
        "handler": "handler.updateProject",
        "events": [
          {
            "http": {
              "path": "update-project",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-updateProject",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateProjectLambdaVersionI8laqwRdRpSmHWbbE53ADnuVRaV676qkvBJ5YWM"
      },
      "deleteProject": {
        "handler": "handler.deleteProject",
        "events": [
          {
            "http": {
              "path": "delete-project",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-deleteProject",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteProjectLambdaVersion20RHmhxgDVx80BfCdZAKKdDQxaRu9b5SslgXzPEAEQw"
      },
      "getSecrets": {
        "handler": "handler.getSecrets",
        "events": [
          {
            "http": {
              "path": "get-secrets",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-getSecrets",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSecretsLambdaVersiongcjmWQwfcqYMiiCVTbOMKFw57cHf2mQ3iBDpOrU"
      },
      "createSecret": {
        "handler": "handler.createSecret",
        "events": [
          {
            "http": {
              "path": "create-secret",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-createSecret",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateSecretLambdaVersionSTQWQiIvr5FZJmdsHRYNUtG5bgMvf267kdHtOc6Q"
      },
      "updateSecret": {
        "handler": "handler.updateSecret",
        "events": [
          {
            "http": {
              "path": "update-secret",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-updateSecret",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateSecretLambdaVersionzezZE2mqArlZI0KcZF6z1ec49i1YncNFrE6g3kFGiI"
      },
      "deleteSecret": {
        "handler": "handler.deleteSecret",
        "events": [
          {
            "http": {
              "path": "delete-secret",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-deleteSecret",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteSecretLambdaVersionL5pMhpl6zbnnGcQwmWwlVvCj0FwZ5e7GSNUdvKs"
      },
      "registerWebhook": {
        "handler": "handler.registerWebhook",
        "events": [
          {
            "http": {
              "path": "registerWebhook",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-registerWebhook",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterWebhookLambdaVersion0t2cVKUkJ2ZKMlsd0XrUzYdrIAMF1qI7FIx24IK8kY"
      },
      "syncPipeline": {
        "handler": "handler.syncPipeline",
        "events": [
          {
            "http": {
              "path": "sync-pipeline",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "secret-vault-api-dev-syncPipeline",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SyncPipelineLambdaVersions28qoq1Dq6db28pGT6r4CVFKyYG4DlWlD9s9pJoIw"
      }
    },
    "resources": {
      "Resources": {
        "AuditLogTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "AuditLog",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ProjectTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Project",
            "AttributeDefinitions": [
              {
                "AttributeName": "projectId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "projectId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "SecretTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Secret",
            "AttributeDefinitions": [
              {
                "AttributeName": "secretId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "secretId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "UserTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "User",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "org": "devwoody",
      "app": "secret-vault",
      "service": "secret-vault-api",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "include": [
          "./functions/**",
          "./node_modules/**"
        ],
        "artifactsS3KeyDirname": "serverless/secret-vault-api/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
        "artifact": "C:\\Users\\Woody\\workspace\\secret-vault-api\\.serverless\\secret-vault-api.zip",
        "artifactDirectoryName": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "secret-vault",
    "appId": null,
    "org": "devwoody",
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\Woody\\workspace\\secret-vault-api\\.serverless\\secret-vault-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/secret-vault-api/dev/1742318959129-2025-03-18T17:29:19.129Z",
    "artifact": "secret-vault-api.zip"
  }
}