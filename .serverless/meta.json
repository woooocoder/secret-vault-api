{
  "C:\\Users\\Woody\\workspace\\secret-vault-api\\serverless.yml": {
    "versionFramework": "4.9.0",
    "servicePath": "C:\\Users\\Woody\\workspace\\secret-vault-api\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "devwoody",
      "app": "secret-vault",
      "service": "secret-vault-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUser"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-createUser"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteUser"
              }
            },
            "GetUserByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUserById"
              }
            },
            "GetAllUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-getAllUsers"
              }
            },
            "GetLogsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-getLogs"
              }
            },
            "CreateLogLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-createLog"
              }
            },
            "GetProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-getProject"
              }
            },
            "CreateProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-createProject"
              }
            },
            "UpdateProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateProject"
              }
            },
            "DeleteProjectLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteProject"
              }
            },
            "GetSecretsLogGroup": "<REDACTED>",
            "CreateSecretLogGroup": "<REDACTED>",
            "UpdateSecretLogGroup": "<REDACTED>",
            "DeleteSecretLogGroup": "<REDACTED>",
            "RegisterWebhookLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-registerWebhook"
              }
            },
            "SyncPipelineLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/secret-vault-api-dev-syncPipeline"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "secret-vault-api",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "secret-vault-api",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "functions/user.getUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-getUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "functions/user.createUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-createUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "functions/user.updateUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-updateUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "functions/user.deleteUser",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-deleteUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "GetUserByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "functions/user.getUserById",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-getUserById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserByIdLogGroup"
              ]
            },
            "GetAllUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "functions/user.getAllUsers",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-getAllUsers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllUsersLogGroup"
              ]
            },
            "GetLogsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.getLogs",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-getLogs",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetLogsLogGroup"
              ]
            },
            "CreateLogLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.createLog",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-createLog",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateLogLogGroup"
              ]
            },
            "GetProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.getProject",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-getProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetProjectLogGroup"
              ]
            },
            "CreateProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.createProject",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-createProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateProjectLogGroup"
              ]
            },
            "UpdateProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.updateProject",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-updateProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateProjectLogGroup"
              ]
            },
            "DeleteProjectLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.deleteProject",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-deleteProject",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteProjectLogGroup"
              ]
            },
            "GetSecretsLambdaFunction": "<REDACTED>",
            "CreateSecretLambdaFunction": "<REDACTED>",
            "UpdateSecretLambdaFunction": "<REDACTED>",
            "DeleteSecretLambdaFunction": "<REDACTED>",
            "RegisterWebhookLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.registerWebhook",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-registerWebhook",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RegisterWebhookLogGroup"
              ]
            },
            "SyncPipelineLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                  "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
                },
                "Handler": "handler.syncPipeline",
                "Runtime": "nodejs18.x",
                "FunctionName": "secret-vault-api-dev-syncPipeline",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SyncPipelineLogGroup"
              ]
            },
            "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserByIdLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllUsersLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetLogsLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateLogLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetProjectLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateProjectLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateProjectLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteProjectLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "GetSecretsLambdaVersionJGVLDuox4HKsYsRZERzxp6IgH1zRJvuQZceGGYFM": "<REDACTED>",
            "CreateSecretLambdaVersionboP9rmFVK51WNH9HKkvbNaXDOsDV18hI01823izxdE": "<REDACTED>",
            "UpdateSecretLambdaVersiondESfFs21SP5zrjaA3t8sn0U35xGe7Ua1AYtWs8nsSM": "<REDACTED>",
            "DeleteSecretLambdaVersionEsdey8ujOzqSjiAfUowywfwzml7afdMgKZASjXOH3ng": "<REDACTED>",
            "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegisterWebhookLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SyncPipelineLambdaFunction"
                },
                "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-secret-vault-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceGetDashuser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get-user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCreateDashuser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "create-user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUpdateDashuser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "update-user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDeleteDashuser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "delete-user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetDashuserDashbyDashid": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get-user-by-id",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetDashallDashusers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get-all-users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetDashlogs": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get-logs",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCreateDashlog": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "create-log",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetDashproject": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "get-project",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceCreateDashproject": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "create-project",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUpdateDashproject": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "update-project",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceDeleteDashproject": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "delete-project",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceGetDashsecrets": "<REDACTED>",
            "ApiGatewayResourceCreateDashsecret": "<REDACTED>",
            "ApiGatewayResourceUpdateDashsecret": "<REDACTED>",
            "ApiGatewayResourceDeleteDashsecret": "<REDACTED>",
            "ApiGatewayResourceRegisterwebhook": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "registerWebhook",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceSyncDashpipeline": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "sync-pipeline",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodGetDashuserGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetDashuser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCreateDashuserPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCreateDashuser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUpdateDashuserPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUpdateDashuser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDeleteDashuserDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDeleteDashuser"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteUserLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetDashuserDashbyDashidGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetDashuserDashbyDashid"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetDashallDashusersGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetDashallDashusers"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllUsersLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllUsersLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetDashlogsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetDashlogs"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetLogsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetLogsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCreateDashlogPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCreateDashlog"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateLogLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateLogLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetDashprojectGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceGetDashproject"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetProjectLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetProjectLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodCreateDashprojectPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceCreateDashproject"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateProjectLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateProjectLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUpdateDashprojectPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUpdateDashproject"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateProjectLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "UpdateProjectLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodDeleteDashprojectDelete": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "DELETE",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceDeleteDashproject"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "DeleteProjectLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "DeleteProjectLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodGetDashsecretsGet": "<REDACTED>",
            "ApiGatewayMethodCreateDashsecretPut": "<REDACTED>",
            "ApiGatewayMethodUpdateDashsecretPut": "<REDACTED>",
            "ApiGatewayMethodDeleteDashsecretDelete": "<REDACTED>",
            "ApiGatewayMethodRegisterwebhookPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegisterwebhook"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RegisterWebhookLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RegisterWebhookLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodSyncDashpipelinePut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSyncDashpipeline"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SyncPipelineLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SyncPipelineLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1742320487459": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodGetDashuserGet",
                "ApiGatewayMethodCreateDashuserPost",
                "ApiGatewayMethodUpdateDashuserPut",
                "ApiGatewayMethodDeleteDashuserDelete",
                "ApiGatewayMethodGetDashuserDashbyDashidGet",
                "ApiGatewayMethodGetDashallDashusersGet",
                "ApiGatewayMethodGetDashlogsGet",
                "ApiGatewayMethodCreateDashlogPut",
                "ApiGatewayMethodGetDashprojectGet",
                "ApiGatewayMethodCreateDashprojectPut",
                "ApiGatewayMethodUpdateDashprojectPut",
                "ApiGatewayMethodDeleteDashprojectDelete",
                "ApiGatewayMethodGetDashsecretsGet",
                "ApiGatewayMethodCreateDashsecretPut",
                "ApiGatewayMethodUpdateDashsecretPut",
                "ApiGatewayMethodDeleteDashsecretDelete",
                "ApiGatewayMethodRegisterwebhookPut",
                "ApiGatewayMethodSyncDashpipelinePut"
              ]
            },
            "GetUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetAllUsersLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetLogsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetLogsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateLogLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateLogLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetProjectLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateProjectLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateProjectLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "DeleteProjectLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteProjectLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetSecretsLambdaPermissionApiGateway": "<REDACTED>",
            "CreateSecretLambdaPermissionApiGateway": "<REDACTED>",
            "UpdateSecretLambdaPermissionApiGateway": "<REDACTED>",
            "DeleteSecretLambdaPermissionApiGateway": "<REDACTED>",
            "RegisterWebhookLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegisterWebhookLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SyncPipelineLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SyncPipelineLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AuditLogTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "AuditLog",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "ProjectTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Project",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "projectId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "projectId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "SecretTable": "<REDACTED>",
            "UserTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "User",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "Export": {
                "Name": "sls-secret-vault-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "GetUserByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-GetUserByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetAllUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-GetAllUsersLambdaFunctionQualifiedArn"
              }
            },
            "GetLogsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-GetLogsLambdaFunctionQualifiedArn"
              }
            },
            "CreateLogLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-CreateLogLambdaFunctionQualifiedArn"
              }
            },
            "GetProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-GetProjectLambdaFunctionQualifiedArn"
              }
            },
            "CreateProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-CreateProjectLambdaFunctionQualifiedArn"
              }
            },
            "UpdateProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-UpdateProjectLambdaFunctionQualifiedArn"
              }
            },
            "DeleteProjectLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-DeleteProjectLambdaFunctionQualifiedArn"
              }
            },
            "GetSecretsLambdaFunctionQualifiedArn": "<REDACTED>",
            "CreateSecretLambdaFunctionQualifiedArn": "<REDACTED>",
            "UpdateSecretLambdaFunctionQualifiedArn": "<REDACTED>",
            "DeleteSecretLambdaFunctionQualifiedArn": "<REDACTED>",
            "RegisterWebhookLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-RegisterWebhookLambdaFunctionQualifiedArn"
              }
            },
            "SyncPipelineLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug"
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-SyncPipelineLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-secret-vault-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "package": {
        "include": [
          "./functions/**",
          "./node_modules/**"
        ],
        "artifactsS3KeyDirname": "serverless/secret-vault-api/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
        "artifact": "C:\\Users\\Woody\\workspace\\secret-vault-api\\.serverless\\secret-vault-api.zip",
        "artifactDirectoryName": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z"
      },
      "functions": {
        "getUser": {
          "handler": "functions/user.getUser",
          "events": [
            {
              "http": {
                "path": "get-user",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-getUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck"
        },
        "createUser": {
          "handler": "functions/user.createUser",
          "events": [
            {
              "http": {
                "path": "create-user",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-createUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw"
        },
        "updateUser": {
          "handler": "functions/user.updateUser",
          "events": [
            {
              "http": {
                "path": "update-user",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-updateUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0"
        },
        "deleteUser": {
          "handler": "functions/user.deleteUser",
          "events": [
            {
              "http": {
                "path": "delete-user",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-deleteUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA"
        },
        "getUserById": {
          "handler": "functions/user.getUserById",
          "events": [
            {
              "http": {
                "path": "get-user-by-id",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-getUserById",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc"
        },
        "getAllUsers": {
          "handler": "functions/user.getAllUsers",
          "events": [
            {
              "http": {
                "path": "get-all-users",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-getAllUsers",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU"
        },
        "getLogs": {
          "handler": "handler.getLogs",
          "events": [
            {
              "http": {
                "path": "get-logs",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-getLogs",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls"
        },
        "createLog": {
          "handler": "handler.createLog",
          "events": [
            {
              "http": {
                "path": "create-log",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-createLog",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU"
        },
        "getProject": {
          "handler": "handler.getProject",
          "events": [
            {
              "http": {
                "path": "get-project",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-getProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w"
        },
        "createProject": {
          "handler": "handler.createProject",
          "events": [
            {
              "http": {
                "path": "create-project",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-createProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE"
        },
        "updateProject": {
          "handler": "handler.updateProject",
          "events": [
            {
              "http": {
                "path": "update-project",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-updateProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk"
        },
        "deleteProject": {
          "handler": "handler.deleteProject",
          "events": [
            {
              "http": {
                "path": "delete-project",
                "method": "delete",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-deleteProject",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8"
        },
        "getSecrets": "<REDACTED>",
        "createSecret": "<REDACTED>",
        "updateSecret": "<REDACTED>",
        "deleteSecret": "<REDACTED>",
        "registerWebhook": {
          "handler": "handler.registerWebhook",
          "events": [
            {
              "http": {
                "path": "registerWebhook",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-registerWebhook",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM"
        },
        "syncPipeline": {
          "handler": "handler.syncPipeline",
          "events": [
            {
              "http": {
                "path": "sync-pipeline",
                "method": "put",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "secret-vault-api-dev-syncPipeline",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug"
        }
      },
      "resources": {
        "Resources": {
          "AuditLogTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AuditLog",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ProjectTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Project",
              "AttributeDefinitions": [
                {
                  "AttributeName": "projectId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "projectId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SecretTable": "<REDACTED>",
          "UserTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "User",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUser"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteUser"
            }
          },
          "GetUserByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUserById"
            }
          },
          "GetAllUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getAllUsers"
            }
          },
          "GetLogsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getLogs"
            }
          },
          "CreateLogLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createLog"
            }
          },
          "GetProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-getProject"
            }
          },
          "CreateProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-createProject"
            }
          },
          "UpdateProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateProject"
            }
          },
          "DeleteProjectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteProject"
            }
          },
          "GetSecretsLogGroup": "<REDACTED>",
          "CreateSecretLogGroup": "<REDACTED>",
          "UpdateSecretLogGroup": "<REDACTED>",
          "DeleteSecretLogGroup": "<REDACTED>",
          "RegisterWebhookLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-registerWebhook"
            }
          },
          "SyncPipelineLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/secret-vault-api-dev-syncPipeline"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "secret-vault-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "secret-vault-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.getUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.createUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.updateUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.deleteUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-deleteUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetUserByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.getUserById",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getUserById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByIdLogGroup"
            ]
          },
          "GetAllUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "functions/user.getAllUsers",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getAllUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllUsersLogGroup"
            ]
          },
          "GetLogsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.getLogs",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getLogs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLogsLogGroup"
            ]
          },
          "CreateLogLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.createLog",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createLog",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateLogLogGroup"
            ]
          },
          "GetProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.getProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-getProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProjectLogGroup"
            ]
          },
          "CreateProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.createProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-createProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateProjectLogGroup"
            ]
          },
          "UpdateProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.updateProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-updateProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProjectLogGroup"
            ]
          },
          "DeleteProjectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.deleteProject",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-deleteProject",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteProjectLogGroup"
            ]
          },
          "GetSecretsLambdaFunction": "<REDACTED>",
          "CreateSecretLambdaFunction": "<REDACTED>",
          "UpdateSecretLambdaFunction": "<REDACTED>",
          "DeleteSecretLambdaFunction": "<REDACTED>",
          "RegisterWebhookLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.registerWebhook",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-registerWebhook",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterWebhookLogGroup"
            ]
          },
          "SyncPipelineLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
                "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
              },
              "Handler": "handler.syncPipeline",
              "Runtime": "nodejs18.x",
              "FunctionName": "secret-vault-api-dev-syncPipeline",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SyncPipelineLogGroup"
            ]
          },
          "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIdLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllUsersLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLogsLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLogLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProjectLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProjectLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProjectLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteProjectLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "GetSecretsLambdaVersionJGVLDuox4HKsYsRZERzxp6IgH1zRJvuQZceGGYFM": "<REDACTED>",
          "CreateSecretLambdaVersionboP9rmFVK51WNH9HKkvbNaXDOsDV18hI01823izxdE": "<REDACTED>",
          "UpdateSecretLambdaVersiondESfFs21SP5zrjaA3t8sn0U35xGe7Ua1AYtWs8nsSM": "<REDACTED>",
          "DeleteSecretLambdaVersionEsdey8ujOzqSjiAfUowywfwzml7afdMgKZASjXOH3ng": "<REDACTED>",
          "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterWebhookLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SyncPipelineLambdaFunction"
              },
              "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-secret-vault-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceGetDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete-user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashuserDashbyDashid": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-user-by-id",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashallDashusers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-all-users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashlogs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-logs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashlog": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-log",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCreateDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "create-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDeleteDashproject": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete-project",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashsecrets": "<REDACTED>",
          "ApiGatewayResourceCreateDashsecret": "<REDACTED>",
          "ApiGatewayResourceUpdateDashsecret": "<REDACTED>",
          "ApiGatewayResourceDeleteDashsecret": "<REDACTED>",
          "ApiGatewayResourceRegisterwebhook": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "registerWebhook",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSyncDashpipeline": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "sync-pipeline",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetDashuserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashuserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashuserPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteDashuserDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteDashuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashuserDashbyDashidGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashuserDashbyDashid"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashallDashusersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashallDashusers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashlogsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashlogs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetLogsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetLogsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashlogPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashlog"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateLogLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateLogLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashprojectGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCreateDashprojectPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCreateDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashprojectPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeleteDashprojectDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDeleteDashproject"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteProjectLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteProjectLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashsecretsGet": "<REDACTED>",
          "ApiGatewayMethodCreateDashsecretPut": "<REDACTED>",
          "ApiGatewayMethodUpdateDashsecretPut": "<REDACTED>",
          "ApiGatewayMethodDeleteDashsecretDelete": "<REDACTED>",
          "ApiGatewayMethodRegisterwebhookPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegisterwebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterWebhookLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterWebhookLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSyncDashpipelinePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSyncDashpipeline"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SyncPipelineLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SyncPipelineLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1742320487459": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGetDashuserGet",
              "ApiGatewayMethodCreateDashuserPost",
              "ApiGatewayMethodUpdateDashuserPut",
              "ApiGatewayMethodDeleteDashuserDelete",
              "ApiGatewayMethodGetDashuserDashbyDashidGet",
              "ApiGatewayMethodGetDashallDashusersGet",
              "ApiGatewayMethodGetDashlogsGet",
              "ApiGatewayMethodCreateDashlogPut",
              "ApiGatewayMethodGetDashprojectGet",
              "ApiGatewayMethodCreateDashprojectPut",
              "ApiGatewayMethodUpdateDashprojectPut",
              "ApiGatewayMethodDeleteDashprojectDelete",
              "ApiGatewayMethodGetDashsecretsGet",
              "ApiGatewayMethodCreateDashsecretPut",
              "ApiGatewayMethodUpdateDashsecretPut",
              "ApiGatewayMethodDeleteDashsecretDelete",
              "ApiGatewayMethodRegisterwebhookPut",
              "ApiGatewayMethodSyncDashpipelinePut"
            ]
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetLogsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLogsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateLogLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLogLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteProjectLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteProjectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSecretsLambdaPermissionApiGateway": "<REDACTED>",
          "CreateSecretLambdaPermissionApiGateway": "<REDACTED>",
          "UpdateSecretLambdaPermissionApiGateway": "<REDACTED>",
          "DeleteSecretLambdaPermissionApiGateway": "<REDACTED>",
          "RegisterWebhookLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterWebhookLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SyncPipelineLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SyncPipelineLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuditLogTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AuditLog",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ProjectTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Project",
              "AttributeDefinitions": [
                {
                  "AttributeName": "projectId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "projectId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SecretTable": "<REDACTED>",
          "UserTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "User",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
            "Export": {
              "Name": "sls-secret-vault-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetUserByIdLambdaFunctionQualifiedArn"
            }
          },
          "GetAllUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetAllUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetLogsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetLogsLambdaFunctionQualifiedArn"
            }
          },
          "CreateLogLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateLogLambdaFunctionQualifiedArn"
            }
          },
          "GetProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-GetProjectLambdaFunctionQualifiedArn"
            }
          },
          "CreateProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-CreateProjectLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-UpdateProjectLambdaFunctionQualifiedArn"
            }
          },
          "DeleteProjectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-DeleteProjectLambdaFunctionQualifiedArn"
            }
          },
          "GetSecretsLambdaFunctionQualifiedArn": "<REDACTED>",
          "CreateSecretLambdaFunctionQualifiedArn": "<REDACTED>",
          "UpdateSecretLambdaFunctionQualifiedArn": "<REDACTED>",
          "DeleteSecretLambdaFunctionQualifiedArn": "<REDACTED>",
          "RegisterWebhookLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-RegisterWebhookLambdaFunctionQualifiedArn"
            }
          },
          "SyncPipelineLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug"
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-SyncPipelineLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-secret-vault-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": false,
        "monitoring": true
      },
      "orgObservabilityIntegrations": [
        {
          "integrationId": "dXqPw2Uerrx898ugCp6Pfd",
          "awsAccountId": "686255979453",
          "status": "alive"
        }
      ],
      "serviceAppId": "t0QwgbW8fxC8knqgWZ",
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: devwoody\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: secret-vault\nservice: secret-vault-api\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n\npackage:\n  include:\n    - ./functions/**\n    - ./node_modules/**\n\nfunctions:\n  getUser:\n    handler: functions/user.getUser\n    events:\n      - http:\n          path: get-user\n          method: get\n  createUser:\n    handler: functions/user.createUser\n    events:\n      - http:\n          path: create-user\n          method: post\n  updateUser:\n    handler: functions/user.updateUser\n    events:\n      - http:\n          path: update-user\n          method: put\n  deleteUser:\n    handler: functions/user.deleteUser\n    events:\n      - http:\n          path: delete-user\n          method: delete\n  getUserById:\n    handler: functions/user.getUserById\n    events:\n      - http:\n          path: get-user-by-id\n          method: get\n  getAllUsers:\n    handler: functions/user.getAllUsers\n    events:\n      - http:\n          path: get-all-users\n          method: get\n\n  getLogs:\n    handler: handler.getLogs\n    events:\n      - http:\n          path: get-logs\n          method: get\n  createLog:\n    handler: handler.createLog\n    events:\n      - http:\n          path: create-log\n          method: put\n\n  getProject:\n    handler: handler.getProject\n    events:\n      - http:\n          path: get-project\n          method: get\n  createProject:\n    handler: handler.createProject\n    events:\n      - http:\n          path: create-project\n          method: put\n  updateProject:\n    handler: handler.updateProject\n    events:\n      - http:\n          path: update-project\n          method: put\n  deleteProject:\n    handler: handler.deleteProject\n    events:\n      - http:\n          path: delete-project\n          method: delete\n\n  getSecrets:\n    handler: handler.getSecrets\n    events:\n      - http:\n          path: get-secrets\n          method: get\n  createSecret:\n    handler: handler.createSecret\n    events:\n      - http:\n          path: create-secret\n          method: put\n  updateSecret:\n    handler: handler.updateSecret\n    events:\n      - http:\n          path: update-secret\n          method: put\n  deleteSecret:\n    handler: handler.deleteSecret\n    events:\n      - http:\n          path: delete-secret\n          method: delete\n\n  registerWebhook:\n    handler: handler.registerWebhook\n    events:\n      - http:\n          path: registerWebhook\n          method: put\n  syncPipeline:\n    handler: handler.syncPipeline\n    events:\n      - http:\n          path: sync-pipeline\n          method: put\n\nresources:\n  Resources:\n    AuditLogTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: AuditLog\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    ProjectTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Project\n        AttributeDefinitions:\n          - AttributeName: projectId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: projectId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    SecretTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: Secret\n        AttributeDefinitions:\n          - AttributeName: secretId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: secretId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n\n    UserTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: User\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "b87c8eb8-7315-4c10-bc8a-f58584a69af7",
    "orgName": "devwoody",
    "userId": "MBH38rRcLzzbqcBNbl",
    "userName": "devwoody",
    "serviceProviderAwsAccountId": "686255979453",
    "serviceProviderAwsCfStackName": "secret-vault-api-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:686255979453:stack/secret-vault-api-dev/67c73ab0-ffb8-11ef-b42a-0e5a1a4659fd",
    "serviceProviderAwsCfStackCreated": "2025-03-13T03:08:15.311Z",
    "serviceProviderAwsCfStackUpdated": "2025-03-18T17:29:29.890Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-deleteUser:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-deleteProject:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-DeleteProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateSecretLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-updateSecret:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-UpdateSecretLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-getProject:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-GetProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-updateUser:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSecretsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-getSecrets:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-GetSecretsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-getUser:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetLogsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-getLogs:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-GetLogsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
        "ExportName": "sls-secret-vault-api-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "DeleteSecretLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-deleteSecret:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-DeleteSecretLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateSecretLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-createSecret:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-CreateSecretLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateLogLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-createLog:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-CreateLogLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RegisterWebhookLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-registerWebhook:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-RegisterWebhookLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-getAllUsers:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-GetAllUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SyncPipelineLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-syncPipeline:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-SyncPipelineLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-createProject:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-CreateProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-createUser:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateProjectLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-updateProject:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-UpdateProjectLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:686255979453:function:secret-vault-api-dev-getUserById:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-secret-vault-api-dev-GetUserByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://0tntpy1xdh.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-secret-vault-api-dev-ServiceEndpoint"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "GetUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUser"
          }
        },
        "CreateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-createUser"
          }
        },
        "UpdateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateUser"
          }
        },
        "DeleteUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteUser"
          }
        },
        "GetUserByIdLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-getUserById"
          }
        },
        "GetAllUsersLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-getAllUsers"
          }
        },
        "GetLogsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-getLogs"
          }
        },
        "CreateLogLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-createLog"
          }
        },
        "GetProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-getProject"
          }
        },
        "CreateProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-createProject"
          }
        },
        "UpdateProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-updateProject"
          }
        },
        "DeleteProjectLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-deleteProject"
          }
        },
        "GetSecretsLogGroup": "<REDACTED>",
        "CreateSecretLogGroup": "<REDACTED>",
        "UpdateSecretLogGroup": "<REDACTED>",
        "DeleteSecretLogGroup": "<REDACTED>",
        "RegisterWebhookLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-registerWebhook"
          }
        },
        "SyncPipelineLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/secret-vault-api-dev-syncPipeline"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "secret-vault-api",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/secret-vault-api-dev*:*:*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "secret-vault-api",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "GetUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "functions/user.getUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-getUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserLogGroup"
          ]
        },
        "CreateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "functions/user.createUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-createUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateUserLogGroup"
          ]
        },
        "UpdateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "functions/user.updateUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-updateUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateUserLogGroup"
          ]
        },
        "DeleteUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "functions/user.deleteUser",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-deleteUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteUserLogGroup"
          ]
        },
        "GetUserByIdLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "functions/user.getUserById",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-getUserById",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserByIdLogGroup"
          ]
        },
        "GetAllUsersLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "functions/user.getAllUsers",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-getAllUsers",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllUsersLogGroup"
          ]
        },
        "GetLogsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.getLogs",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-getLogs",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetLogsLogGroup"
          ]
        },
        "CreateLogLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.createLog",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-createLog",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateLogLogGroup"
          ]
        },
        "GetProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.getProject",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-getProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetProjectLogGroup"
          ]
        },
        "CreateProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.createProject",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-createProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateProjectLogGroup"
          ]
        },
        "UpdateProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.updateProject",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-updateProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateProjectLogGroup"
          ]
        },
        "DeleteProjectLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.deleteProject",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-deleteProject",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteProjectLogGroup"
          ]
        },
        "GetSecretsLambdaFunction": "<REDACTED>",
        "CreateSecretLambdaFunction": "<REDACTED>",
        "UpdateSecretLambdaFunction": "<REDACTED>",
        "DeleteSecretLambdaFunction": "<REDACTED>",
        "RegisterWebhookLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.registerWebhook",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-registerWebhook",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "RegisterWebhookLogGroup"
          ]
        },
        "SyncPipelineLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
              "S3Key": "serverless/secret-vault-api/dev/1742320494425-2025-03-18T17:54:54.425Z/secret-vault-api.zip"
            },
            "Handler": "handler.syncPipeline",
            "Runtime": "nodejs18.x",
            "FunctionName": "secret-vault-api-dev-syncPipeline",
            "MemorySize": 1024,
            "Timeout": 6,
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SyncPipelineLogGroup"
          ]
        },
        "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateUserLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateUserLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteUserLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserByIdLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllUsersLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetLogsLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateLogLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetProjectLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateProjectLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateProjectLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteProjectLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "GetSecretsLambdaVersionJGVLDuox4HKsYsRZERzxp6IgH1zRJvuQZceGGYFM": "<REDACTED>",
        "CreateSecretLambdaVersionboP9rmFVK51WNH9HKkvbNaXDOsDV18hI01823izxdE": "<REDACTED>",
        "UpdateSecretLambdaVersiondESfFs21SP5zrjaA3t8sn0U35xGe7Ua1AYtWs8nsSM": "<REDACTED>",
        "DeleteSecretLambdaVersionEsdey8ujOzqSjiAfUowywfwzml7afdMgKZASjXOH3ng": "<REDACTED>",
        "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RegisterWebhookLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SyncPipelineLambdaFunction"
            },
            "CodeSha256": "6bu7gtjauZ4dVEgd9m1ZFEyHX/jjQNm77mreWzkIaKo="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-secret-vault-api",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceGetDashuser": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "get-user",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceCreateDashuser": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "create-user",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUpdateDashuser": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "update-user",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDeleteDashuser": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "delete-user",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceGetDashuserDashbyDashid": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "get-user-by-id",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceGetDashallDashusers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "get-all-users",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceGetDashlogs": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "get-logs",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceCreateDashlog": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "create-log",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceGetDashproject": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "get-project",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceCreateDashproject": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "create-project",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUpdateDashproject": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "update-project",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceDeleteDashproject": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "delete-project",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceGetDashsecrets": "<REDACTED>",
        "ApiGatewayResourceCreateDashsecret": "<REDACTED>",
        "ApiGatewayResourceUpdateDashsecret": "<REDACTED>",
        "ApiGatewayResourceDeleteDashsecret": "<REDACTED>",
        "ApiGatewayResourceRegisterwebhook": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "registerWebhook",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceSyncDashpipeline": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "sync-pipeline",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodGetDashuserGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceGetDashuser"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodCreateDashuserPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceCreateDashuser"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateUserLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUpdateDashuserPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUpdateDashuser"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateUserLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDeleteDashuserDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDeleteDashuser"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DeleteUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DeleteUserLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodGetDashuserDashbyDashidGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceGetDashuserDashbyDashid"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserByIdLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetUserByIdLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodGetDashallDashusersGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceGetDashallDashusers"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetAllUsersLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetAllUsersLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodGetDashlogsGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceGetDashlogs"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetLogsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetLogsLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodCreateDashlogPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceCreateDashlog"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateLogLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateLogLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodGetDashprojectGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceGetDashproject"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetProjectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "GetProjectLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodCreateDashprojectPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceCreateDashproject"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateProjectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "CreateProjectLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodUpdateDashprojectPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUpdateDashproject"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateProjectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "UpdateProjectLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodDeleteDashprojectDelete": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "DELETE",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceDeleteDashproject"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DeleteProjectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "DeleteProjectLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodGetDashsecretsGet": "<REDACTED>",
        "ApiGatewayMethodCreateDashsecretPut": "<REDACTED>",
        "ApiGatewayMethodUpdateDashsecretPut": "<REDACTED>",
        "ApiGatewayMethodDeleteDashsecretDelete": "<REDACTED>",
        "ApiGatewayMethodRegisterwebhookPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceRegisterwebhook"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "RegisterWebhookLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "RegisterWebhookLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodSyncDashpipelinePut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceSyncDashpipeline"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SyncPipelineLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "SyncPipelineLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1742320487459": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodGetDashuserGet",
            "ApiGatewayMethodCreateDashuserPost",
            "ApiGatewayMethodUpdateDashuserPut",
            "ApiGatewayMethodDeleteDashuserDelete",
            "ApiGatewayMethodGetDashuserDashbyDashidGet",
            "ApiGatewayMethodGetDashallDashusersGet",
            "ApiGatewayMethodGetDashlogsGet",
            "ApiGatewayMethodCreateDashlogPut",
            "ApiGatewayMethodGetDashprojectGet",
            "ApiGatewayMethodCreateDashprojectPut",
            "ApiGatewayMethodUpdateDashprojectPut",
            "ApiGatewayMethodDeleteDashprojectDelete",
            "ApiGatewayMethodGetDashsecretsGet",
            "ApiGatewayMethodCreateDashsecretPut",
            "ApiGatewayMethodUpdateDashsecretPut",
            "ApiGatewayMethodDeleteDashsecretDelete",
            "ApiGatewayMethodRegisterwebhookPut",
            "ApiGatewayMethodSyncDashpipelinePut"
          ]
        },
        "GetUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DeleteUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserByIdLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserByIdLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetAllUsersLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllUsersLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetLogsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetLogsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateLogLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateLogLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetProjectLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateProjectLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateProjectLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "DeleteProjectLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteProjectLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetSecretsLambdaPermissionApiGateway": "<REDACTED>",
        "CreateSecretLambdaPermissionApiGateway": "<REDACTED>",
        "UpdateSecretLambdaPermissionApiGateway": "<REDACTED>",
        "DeleteSecretLambdaPermissionApiGateway": "<REDACTED>",
        "RegisterWebhookLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RegisterWebhookLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SyncPipelineLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SyncPipelineLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AuditLogTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "AuditLog",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ProjectTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Project",
            "AttributeDefinitions": [
              {
                "AttributeName": "projectId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "projectId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "SecretTable": "<REDACTED>",
        "UserTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "User",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-3d1e2608-9b7f",
          "Export": {
            "Name": "sls-secret-vault-api-dev-ServerlessDeploymentBucketName"
          }
        },
        "GetUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserLambdaVersionFlKDBKT9WOuUax6730iwtxwM9bZ8YP5rQJwup0Jck"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-GetUserLambdaFunctionQualifiedArn"
          }
        },
        "CreateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateUserLambdaVersionFzkKrWoliqXeoSNLZ9locQPKmWqMh5i6MDfjwWOdw"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-CreateUserLambdaFunctionQualifiedArn"
          }
        },
        "UpdateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateUserLambdaVersionabdikHFEUOS5WYMnrqHiiTkplhcBVoTsCW9nUSqWJ0"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-UpdateUserLambdaFunctionQualifiedArn"
          }
        },
        "DeleteUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteUserLambdaVersionAi9uUhYZ2bMJ1gQLXA0CLb6bHhzcBBnrGgvKPp9zbMA"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-DeleteUserLambdaFunctionQualifiedArn"
          }
        },
        "GetUserByIdLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserByIdLambdaVersionZLndAKJJo4612fGMxIPEEhxey9RZRjsjeTXSFo4jc"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-GetUserByIdLambdaFunctionQualifiedArn"
          }
        },
        "GetAllUsersLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllUsersLambdaVersionusAVbrdFNtOx2Wtl0TqiFVzykUjW7Y1uqHYkY8jEnuU"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-GetAllUsersLambdaFunctionQualifiedArn"
          }
        },
        "GetLogsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetLogsLambdaVersionWcPXSym7pLdhDmNZJ4VaL8o3nCh03rcrtpGIBui0dls"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-GetLogsLambdaFunctionQualifiedArn"
          }
        },
        "CreateLogLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateLogLambdaVersionpeXxHvlNg9836LJqbjQdnquXXiIW85McgttdgcoRU"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-CreateLogLambdaFunctionQualifiedArn"
          }
        },
        "GetProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetProjectLambdaVersion5wxSUrnw7m4nGLjhz31MAbuMo2ypYlUfP49qz1x8w"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-GetProjectLambdaFunctionQualifiedArn"
          }
        },
        "CreateProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateProjectLambdaVersionDqZlVFBZ5I5Ot91TM2ZM92suRYZQns9gCgh4PtvmoE"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-CreateProjectLambdaFunctionQualifiedArn"
          }
        },
        "UpdateProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateProjectLambdaVersionZrSAODEQ2W2h4eBGFzgoAlhtlek4zI1bjgTqN2vk"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-UpdateProjectLambdaFunctionQualifiedArn"
          }
        },
        "DeleteProjectLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteProjectLambdaVersionfuqFCxu4QAfzO75ywMM6IHT4UlKFC4J23oTBu40G8"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-DeleteProjectLambdaFunctionQualifiedArn"
          }
        },
        "GetSecretsLambdaFunctionQualifiedArn": "<REDACTED>",
        "CreateSecretLambdaFunctionQualifiedArn": "<REDACTED>",
        "UpdateSecretLambdaFunctionQualifiedArn": "<REDACTED>",
        "DeleteSecretLambdaFunctionQualifiedArn": "<REDACTED>",
        "RegisterWebhookLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RegisterWebhookLambdaVersion1LkMevi0e7qwNNGkeoUrBDLKlcWw1TOxN4CJRGibKM"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-RegisterWebhookLambdaFunctionQualifiedArn"
          }
        },
        "SyncPipelineLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SyncPipelineLambdaVersionL56mbsT8Uz6zqurE10PDjbShCHRn96NSKNfPvLEug"
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-SyncPipelineLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-secret-vault-api-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}